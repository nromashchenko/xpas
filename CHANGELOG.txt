v0.2.1
- Implemented ghost node injection.
- xpas::phylo_node reworked, some methods are public now.
- xpas_utils has gone and now is a part of xpas. All <utils/io/X.h> are now <xpas/X.h>
- Added a preorder iterator for xpas::phylo_node. visit_subtree now has a template argument Iterator,
    which can be either post- or preorder_tree_iterator. It is now const post-order iteration by default.


v0.2.0
- Supported proteins. xpas has to be compiled separately for DNA and proteins. It now has three main targets:
  xpas_dna (for DNA), xpas_aa (for proteins), and xpas_aa_pos (phylo k-mers for proteins, where every k-mer
  stores its position in the reference alignment).
- Reworked the serialization protocol. Now there are three versions for databases built by different versions of xpas.
  Backward compatibility preserved (0.2.0 can load databases created by older versions)
- Improved Github Actions, added MacOS builds
- Added xpas::is_gap, xpas::is_ambiguous
- Improved compatibility with old CMake
- Fixed issues prevented xpas being compilable on MacOS.

v0.1.8
- Renamed the library and the namespace to xpas
- Changing submodule remotes to https for public releases
- Added an alpha version of the python binding, pyxpas (not ready for production use)
- xpas::io::read_fasta is now batched
- xpas::phylo_tree and the newick parser are reworked. Added xpas::visit_subtree for iteration over a phylogenetic subtree
- Added Github Actions integration
- Update examples and tests

v0.1.7
- Fixed a bug in core::to_kmers<one_ambiguity_policy> which lead to encoding ambiguous k-mer incorrectly
- Updated examples

v0.1.6
- core::to_kmers and core::encode now have ambiguity policy. The old behaviour implemented in the core::no_ambiguity_policy
- Implemented core::one_ambiguity_policy which allows one ambiguous base pair per k-mer
- With the core::one_ambiguity policy enabled, core::to_kmers now returns another type
- Added rappas::io::clean_sequence to filter gaps in the sequence (requires copying of the input string)
- core::score_threshold is not log10 anymore
- Updated examples

v0.1.5
- seq_traits_impl<dna>::char_type is now unsigned char
- seq_traits_impl<dna>::max_kmer_length is now 12 (due to static memory accesses of size ~4**k)
- Added phylo_kmer_db::hash_function
- phylo_kmer_db::branch_type is now uint32_t

v0.1.4
- Added phylo_kmer_db::omega (score threshold parameter)
- Updated serialization
- Updated examples
- Updated tests

v0.1.3
- seq_traits<dna>::key_type now is uint32_t
- phylo_kmer_db now does not check the values pass to insert in the db. The old put() method replaced by insert()
- Now rappas::core can be compiled against different hash map implementations (see CMakeLists files)
- Now phylo_kmer_db contains a newick-formatted original tree. Added the tree() method
- Added phylo_tree.h (moved from rappas-build)
- Added newick.h (load_newick, parse_newick, to_newick in rappas::io)
- Reimplemented core::phylo_tree. Now it also contains pre-/post-order node ids and fast search by node id (get_by_preorder_id, get_by_postorder_id)
- Added utils/ (part of rappas::io namespace)
- A lot of other small changes
- Updated examples
- Updated tests

v0.1.2
- core::encode_kmers and core::to_kmers now support gaps and N's
- core::phylo_kmer_db now has kmer_size()
- Updated examples
- Added tests
- Added changelog

v0.1.1
- Added core::to_kmers (k-mer iteration and rolling codes calculation)
- Updated examples

v0.1.0
- First released version
